[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "jsonable_encoder",
        "importPath": "fastapi.encoders",
        "description": "fastapi.encoders",
        "isExtraImport": true,
        "detail": "fastapi.encoders",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "model.user",
        "description": "model.user",
        "isExtraImport": true,
        "detail": "model.user",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "schemas.userSchema",
        "description": "schemas.userSchema",
        "isExtraImport": true,
        "detail": "schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "userModel",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "userModel2",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "userModel3",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Body_Fields.main",
        "description": "Body_Fields.main",
        "peekOfCode": "class User(BaseModel):\n    name: str | None\n    userName: str\n    bio: str | None = Field(\n        title=\"user bio\",\n        max_length=100,\n    )\n    salary: float = Field(\n        ge=1000,\n    )",
        "detail": "Body_Fields.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Body_Fields.main",
        "description": "Body_Fields.main",
        "peekOfCode": "app = FastAPI()\nclass User(BaseModel):\n    name: str | None\n    userName: str\n    bio: str | None = Field(\n        title=\"user bio\",\n        max_length=100,\n    )\n    salary: float = Field(\n        ge=1000,",
        "detail": "Body_Fields.main",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Body_Multiple_Params.main",
        "description": "Body_Multiple_Params.main",
        "peekOfCode": "class User(BaseModel):\n    name: str | None = None\n    userName: str\n    password: str\n    age: int | None = 20\n@app.put(\"/{id}\", tags=[\"Get ID\"])\nasync def get_id(id: Annotated[int, Path(title=\"Path id\", ge=1, le=10)], query: Annotated[str, Query(alias=\"Enter Name\", max_length=10, min_length=2)] = None, user: User = None):\n    result = {\n        \"userID\": id\n    }",
        "detail": "Body_Multiple_Params.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Body_Multiple_Params.main",
        "description": "Body_Multiple_Params.main",
        "peekOfCode": "app = FastAPI()\nclass User(BaseModel):\n    name: str | None = None\n    userName: str\n    password: str\n    age: int | None = 20\n@app.put(\"/{id}\", tags=[\"Get ID\"])\nasync def get_id(id: Annotated[int, Path(title=\"Path id\", ge=1, le=10)], query: Annotated[str, Query(alias=\"Enter Name\", max_length=10, min_length=2)] = None, user: User = None):\n    result = {\n        \"userID\": id",
        "detail": "Body_Multiple_Params.main",
        "documentation": {}
    },
    {
        "label": "Relation",
        "kind": 6,
        "importPath": "Body_nested_Model.model.user",
        "description": "Body_nested_Model.model.user",
        "peekOfCode": "class Relation(Enum):\n    Mother = \"Mother\"\n    Father = \"Father\"\nclass Image(BaseModel):\n    url: HttpUrl  \n    Name:str| None\nclass Parents(BaseModel):\n    full_name: str | None\n    relation:Relation | None = Relation.Mother \nclass UserModel(BaseModel):",
        "detail": "Body_nested_Model.model.user",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "Body_nested_Model.model.user",
        "description": "Body_nested_Model.model.user",
        "peekOfCode": "class Image(BaseModel):\n    url: HttpUrl  \n    Name:str| None\nclass Parents(BaseModel):\n    full_name: str | None\n    relation:Relation | None = Relation.Mother \nclass UserModel(BaseModel):\n    name: str | None\n    userName: str \n    password: str ",
        "detail": "Body_nested_Model.model.user",
        "documentation": {}
    },
    {
        "label": "Parents",
        "kind": 6,
        "importPath": "Body_nested_Model.model.user",
        "description": "Body_nested_Model.model.user",
        "peekOfCode": "class Parents(BaseModel):\n    full_name: str | None\n    relation:Relation | None = Relation.Mother \nclass UserModel(BaseModel):\n    name: str | None\n    userName: str \n    password: str \n    # skill: set[str] = set()\n    reference: Parents \n    image: list[Image]",
        "detail": "Body_nested_Model.model.user",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "Body_nested_Model.model.user",
        "description": "Body_nested_Model.model.user",
        "peekOfCode": "class UserModel(BaseModel):\n    name: str | None\n    userName: str \n    password: str \n    # skill: set[str] = set()\n    reference: Parents \n    image: list[Image]",
        "detail": "Body_nested_Model.model.user",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Body_nested_Model.main",
        "description": "Body_nested_Model.main",
        "peekOfCode": "app = FastAPI()\n@app.put(\"/\",tags=[\"nasted\"])\nasync def updateUser(request_body: UserModel):\n   encoded = jsonable_encoder(request_body)\n   print(encoded)\n   return JSONResponse(content=encoded, status_code=200)",
        "detail": "Body_nested_Model.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Cookie_parameters.main",
        "description": "Cookie_parameters.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\nasync def room_routes():\n    return {\"message\": \"hello world\"}\n@app.get(\"/token\", tags=[\"token\"])\nasync def write_token():\n    response = Response(content=\"cookie is set successfully\")\n    response.set_cookie(key=\"token\", value=\"fake-cookie-token\", httponly=True, max_age=60,  path=\"/\", secure=False, samesite=\"strict\")\n    return response\n@app.get(\"/items\", tags=[\"items\"])",
        "detail": "Cookie_parameters.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "FastApi_ Hello.main",
        "description": "FastApi_ Hello.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n@app.get(\"/user\")\nasync def get_user():\n    return {\n        \"name\": \"John Doe\", \n        \"age\": 30,\n        \"email\":\"john@gmail.com\",",
        "detail": "FastApi_ Hello.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Header_Paramater.main",
        "description": "Header_Paramater.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n@app.get(\"/item\")\nasync def item1(item: str):\n    print(item)\n    return {\"item\": item}\n@app.get(\"/headers\")\nasync def get_header(req:Request):",
        "detail": "Header_Paramater.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "PathValidation.main",
        "description": "PathValidation.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/products/{product_id}\", tags=[\"products\"])\nasync def get_product(product_id: int):\n    print(product_id)\n    return {\"product_id\": product_id}\n@app.get(\"/user/{id}\", tags=[\"user\"])\nasync def getUer(id: Annotated[int, Path(title=\"The ID of the user to get\")]):\n    result = {\n        \"id\": 1\n    }",
        "detail": "PathValidation.main",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "path_params.main",
        "description": "path_params.main",
        "peekOfCode": "class Role(str, Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n@app.get(\"/user/{role}\")\nasync def user(role: Role):\n    if role is role.ADMIN:\n        return JSONResponse(\n            status_code=status.HTTP_200_OK,\n            content={\n                \"User\": \"Emon\",",
        "detail": "path_params.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "path_params.main",
        "description": "path_params.main",
        "peekOfCode": "app = FastAPI()\nclass Role(str, Enum):\n    ADMIN = \"admin\"\n    USER = \"user\"\n@app.get(\"/user/{role}\")\nasync def user(role: Role):\n    if role is role.ADMIN:\n        return JSONResponse(\n            status_code=status.HTTP_200_OK,\n            content={",
        "detail": "path_params.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "quaryValidation.main",
        "description": "quaryValidation.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/items\", tags=[\"items\"])\nasync def get_items(q: Annotated[str, Query(title = \"Get all Item\",description=\"Item get description\",alias=\"Enter str\",deprecated = False)] = None):\n    print(q)\n    if q:\n        false_data.update({\"new Items\": q})\n    return false_data\n@app.get(\"/\", tags=[\"health\"])\nasync def root(q: str | None = None):\n    print(q)",
        "detail": "quaryValidation.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "quary_params.main",
        "description": "quary_params.main",
        "peekOfCode": "app = FastAPI()\nfake_items_db = [{\"item_name\": \"Foo\"}, {\n    \"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n@app.get(\"/\")\nasync def root(skip: int = 0, limit: int = 10):\n    items = fake_items_db[skip: skip + limit]\n    return [items]",
        "detail": "quary_params.main",
        "documentation": {}
    },
    {
        "label": "fake_items_db",
        "kind": 5,
        "importPath": "quary_params.main",
        "description": "quary_params.main",
        "peekOfCode": "fake_items_db = [{\"item_name\": \"Foo\"}, {\n    \"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n@app.get(\"/\")\nasync def root(skip: int = 0, limit: int = 10):\n    items = fake_items_db[skip: skip + limit]\n    return [items]",
        "detail": "quary_params.main",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "RequestBody.schemas.userSchema",
        "description": "RequestBody.schemas.userSchema",
        "peekOfCode": "class UserSchema(BaseModel):\n    name: str | None = None\n    email: str \n    password: str \n    role: Role = Role.ADMIN",
        "detail": "RequestBody.schemas.userSchema",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "RequestBody.main",
        "description": "RequestBody.main",
        "peekOfCode": "app = FastAPI() \n@app.post(\"/\", tags = [\"create user\"])\nasync def store(user: UserSchema) -> UserSchema:\n    encode = jsonable_encoder(user)\n    print(encode)\n    return JSONResponse(status_code = status.HTTP_201_CREATED, content = encode)\n@app.get(\"/\")\nasync def index():\n    return {\n        \"Hello\":\"World\"",
        "detail": "RequestBody.main",
        "documentation": {}
    },
    {
        "label": "userModel",
        "kind": 6,
        "importPath": "RequestBody_Example.models.user",
        "description": "RequestBody_Example.models.user",
        "peekOfCode": "class userModel(BaseModel):\n    name: str| None \nclass userModel2(BaseModel):\n    name: str | None = Field(\n        examples = [\"Emon khan\"]\n    )\nclass userModel3(BaseModel):\n    name: str | None \n    model_config = {\n        \"json_schema_extra\": {",
        "detail": "RequestBody_Example.models.user",
        "documentation": {}
    },
    {
        "label": "userModel2",
        "kind": 6,
        "importPath": "RequestBody_Example.models.user",
        "description": "RequestBody_Example.models.user",
        "peekOfCode": "class userModel2(BaseModel):\n    name: str | None = Field(\n        examples = [\"Emon khan\"]\n    )\nclass userModel3(BaseModel):\n    name: str | None \n    model_config = {\n        \"json_schema_extra\": {\n           \"examples\": [\n                {",
        "detail": "RequestBody_Example.models.user",
        "documentation": {}
    },
    {
        "label": "userModel3",
        "kind": 6,
        "importPath": "RequestBody_Example.models.user",
        "description": "RequestBody_Example.models.user",
        "peekOfCode": "class userModel3(BaseModel):\n    name: str | None \n    model_config = {\n        \"json_schema_extra\": {\n           \"examples\": [\n                {\n                    \"name\": \"Emon khan\",\n                },\n            ]\n        }",
        "detail": "RequestBody_Example.models.user",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "RequestBody_Example.main",
        "description": "RequestBody_Example.main",
        "peekOfCode": "app = FastAPI()\n@app.put(\"/\", tags=[\"Update user 1\"])\nasync def update_user_1(request_body: Annotated[userModel, Body(example={\n    \"name\": \"John Doe\",\n})]):\n    print(request_body)\n    pass\n@app.put(\"/2\", tags=[\"Update user 2\"])\nasync def update_user_2(request_body: Annotated[userModel2, Body()]):\n    print(request_body)",
        "detail": "RequestBody_Example.main",
        "documentation": {}
    }
]